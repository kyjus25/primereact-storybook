import{T as i}from"./tooltip.esm-969ffd2f.js";import"./index-76fb7be0.js";import"./_commonjsHelpers-de833af9.js";import"./api.esm-e57be548.js";import"./componentbase.esm-f35515f0.js";import"./hooks.esm-2e882e60.js";import"./portal.esm-d730a851.js";import"./index-d3ea75b5.js";const u={title:"Overlay/Tooltip",component:i,parameters:{layout:"centered"},argTypes:{appendTo:{control:"select",description:"DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",options:["null","HTMLElement","self"]},at:{control:"text",description:"Defines which position on the target element to align the positioned tooltip.",options:null},autoHide:{control:"boolean",description:"Whether to hide tooltip when hovering over tooltip content.",options:null},autoZIndex:{control:"boolean",description:"Whether to automatically manage layering.",options:null},baseZIndex:{control:"number",description:"Base zIndex value to use in layering.",options:null},children:{control:"text",description:"Used to get the child elements of the component.",options:null},className:{control:"text",description:"Style class of the tooltip.",options:null},content:{control:"text",description:"Content to be displayed in tooltip.",options:null},disabled:{control:"boolean",description:"When present, it specifies that the tooltip should be hidden.",options:null},event:{control:"select",description:"Event to show the tooltip.",options:["both","focus","hover"]},hideDelay:{control:"number",description:"Delay to hide the tooltip in milliseconds.",options:null},hideEvent:{control:"text",description:"Event to hide the tooltip if the event property is empty.",options:null},id:{control:"text",description:"Unique identifier of the element.",options:null},mouseTrack:{control:"boolean",description:"Whether the tooltip will follow the mouse.",options:null},mouseTrackLeft:{control:"number",description:"Defines left position of the tooltip in relation to the mouse when the mouseTrack is enabled.",options:null},mouseTrackTop:{control:"number",description:"Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled.",options:null},my:{control:"text",description:"Defines which position on the tooltip being positioned to align with the target element.",options:null},position:{control:"select",description:"Position of the tooltip.",options:["left","top","bottom","right","mouse"]},pt:{control:"object",description:"Uses to pass attributes to DOM elements inside the component.",options:null},ptOptions:{control:"object",description:"Used to configure passthrough(pt) options of the component.",options:null},showDelay:{control:"number",description:"Delay to show the tooltip in milliseconds.",options:null},showEvent:{control:"text",description:"Event to show the tooltip if the event property is empty.",options:null},showOnDisabled:{control:"boolean",description:"Whether to show tooltip for disabled elements.",options:null},style:{control:"object",description:"Style of the tooltip.",options:null},target:{control:"select",description:"Target element on global tooltip option.",options:["string","string[]","HTMLElement","RefObject<HTMLElement>"]},updateDelay:{control:"number",description:"Delay to update the tooltip in milliseconds.",options:null}}},o={args:{}};var t,e,n;o.parameters={...o.parameters,docs:{...(t=o.parameters)==null?void 0:t.docs,source:{originalSource:`{
  args: {}
}`,...(n=(e=o.parameters)==null?void 0:e.docs)==null?void 0:n.source}}};const m=["Default"];export{o as Default,m as __namedExportsOrder,u as default};
